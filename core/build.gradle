apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven'
apply plugin: 'eclipse'

version = '0.15.8'
archivesBaseName = 'helixj-core'
eclipse.project.name = 'helixj-core'

dependencies {
    compile group: 'com.madgag.spongycastle', name: 'core', version: '1.58.0.0'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile 'com.google.protobuf:protobuf-java:3.6.1'
    compile group: 'com.squareup.okhttp', name: 'okhttp', version: '2.7.5'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'net.jcip:jcip-annotations:1.0'
    compile group: 'com.lambdaworks', name: 'scrypt', version: '1.4.0'
    compileOnly 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.easymock:easymock:3.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.5.2'
    testImplementation 'org.slf4j:slf4j-jdk14:1.7.30'
    testImplementation 'com.h2database:h2:1.3.167'
    testImplementation 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.3'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.49'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.2-1004-jdbc41'

    compile group: 'org.bitcoinj', name: 'orchid', version: '1.2.1'

}

sourceCompatibility = 1.7
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.1'
    }
    generatedFilesBaseDir = new File(projectDir, '/src') // workaround for '$projectDir/src'
}

test {
    exclude 'org/helixj/core/PeerTest*'
    exclude 'org/helixj/core/TransactionBroadcastTest*'
    exclude 'org/helixj/net/NetworkAbstractionTests*'
    exclude 'org/helixj/protocols/channels/ChannelConnectionTest*'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

/*task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}*/

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}
